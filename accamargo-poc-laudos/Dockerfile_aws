# Build an image that can do training and inference in SageMaker
# This is a Python 3 image that uses the nginx, gunicorn, flask stack
# for serving inferences in a stable way.

#FROM ubuntu:16.04
FROM ubuntu:18.04 AS aws_image

#MAINTAINER Amazon AI <sage-learner@amazon.com>
# Set some environment variables. PYTHONUNBUFFERED keeps Python from buffering our standard
# output stream, which means that logs can be delivered to the user quickly. PYTHONDONTWRITEBYTECODE
# keeps Python from writing the .pyc files which are unnecessary in this case. We also update
# PATH so that the train and serve programs are found when the container is invoked.
ENV PYTHONUNBUFFERED=TRUE
ENV PYTHONDONTWRITEBYTECODE=TRUE
ENV PATH="/opt/program:${PATH}"


COPY container-aws/service /opt/program
COPY src /opt/program
COPY requirements.txt /opt/program
COPY container-aws/ml /opt/ml
COPY artifacts /opt/ml/model

WORKDIR /opt/program

RUN apt-get -y update && apt-get install -y --no-install-recommends \
         wget \
         python3.6 \
         nginx \
         ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Here we get all python packages.
# There's substantial overlap between scipy and numpy that we eliminate by
# linking them together. Likewise, pip leaves the install caches populated which uses
# a significant amount of space. These optimizations save a fair amount of space in the
# image, which reduces start up time.
RUN wget https://bootstrap.pypa.io/get-pip.py
RUN apt-get update
RUN apt-get install python3-pip -y
RUN pip3 install joblib
RUN pip3 install flask
RUN pip3 install gevent 
RUN pip3 install gunicorn
RUN pip3 install psutil

RUN rm -rf /root/.cache
RUN alias python=python3
RUN ln -s /usr/bin/python3 /usr/bin/python

WORKDIR /opt/program

RUN pip3 install -r requirements.txt